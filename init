#!/usr/bin/env php
<?php

clearScreen();
$params = getParams();
$config = [
    'basePath' => dirname(__DIR__),
    'components' => [
        'db' => [
            'class' => 'yii\db\Connection',
            'dsn' => 'mysql:host=localhost;dbname=mydatabase', // MySQL, MariaDB
            //'dsn' => 'sqlite:/path/to/database/file', // SQLite
            //'dsn' => 'pgsql:host=localhost;port=5432;dbname=mydatabase', // PostgreSQL
            //'dsn' => 'cubrid:dbname=demodb;host=localhost;port=33000', // CUBRID
            //'dsn' => 'sqlsrv:Server=localhost;Database=mydatabase', // MS SQL Server, sqlsrv driver
            //'dsn' => 'dblib:host=localhost;dbname=mydatabase', // MS SQL Server, dblib driver
            //'dsn' => 'mssql:host=localhost;dbname=mydatabase', // MS SQL Server, mssql driver
            //'dsn' => 'oci:dbname=//localhost:1521/mydatabase', // Oracle
            'username' => 'root',
            'password' => '',
            'charset' => 'utf8',
        ],
        'authManager' => [
            'class' => 'fourteenmeister\core\AuthManager',
        ],
        'urlManager' => [
            'enablePrettyUrl' => true,
            'showScriptName' => false,
        ],
        'user' => [
            'class' => 'yii\web\User',
            'identityClass' => 'fourteenmeister\users\models\User',
            'enableAutoLogin' => true,
            'loginUrl' => '../../frontend/web/users/login',
        ],
        'request' => [
            'enableCookieValidation' => true,
            'enableCsrfValidation' => true,
            'cookieValidationKey' => 'secret_key',
        ],
    ],
    'modules' => [
        'users' => [
            'class' => 'fourteenmeister\users\Module',
            'tableUser' => 'users'
        ],
        'rbac' => [
            'class' => 'fourteenmeister\rbac\Module'
        ]
    ]
];
$root = str_replace('\\', '/', __DIR__);
$envs = require("$root/environments/index.php");
$envNames = array_keys($envs);
$languages = glob($root . '/vendor/yiisoft/yii2/messages/*', GLOB_ONLYDIR);
array_walk($languages, function (&$v, $k) {
    $v = basename($v);
});

echo "\t\033[32m Yii Application Initialization Tool v1.0\033[0m \n\n";

echo "  \033[33m Select your application language:\033[0m \n\n";
foreach ($languages as $i => $name) {
    echo "  [$i] $name\n";
}
echo "\n  Your choice [0-" . (count($languages) - 1) . ', or "q" to quit] ';
$language = trim(fgets(STDIN));
if (strtolower($language) == 'q') {
    echo "\n  Quit initialization.\n";
    exit(0);
}
if (ctype_digit($language) && in_array($language, range(0, count($languages) - 1))) {
    $language = $languages[$language];
} else {
    $language = 'en';
}

$config['language'] = $language;

clearScreen();
echo "\t\033[32m Yii Application Initialization Tool v1.0\033[0m \n\n";
echo "  \033[33m Application language - {$language}\033[0m \n\n";

while (true) {
    $db = dbConfiguration();
    if ($db) {
        break;
    }
}

if ($db) {
    $config['components']['db'] = [
        'class' => 'yii\db\Connection',
        'dsn' => $db['dsn'],
        'username' => $db['username'],
        'password' => $db['password'],
        'charset' => 'utf8',
    ];
}

while (true) {
    $mail = mailConfiguration();
    if ($mail) {
        break;
    }
}

$config['components']['mail'] = [
    'class' => 'yii\swiftmailer\Mailer',
    'transport' => [
        'class' => 'Swift_SmtpTransport',
        'host' => $mail['host'],
        'username' => $mail['username'],
        'password' => $mail['password'],
        'port' => $mail['port'],
        'encryption' => 'tls',
    ]
];

$envName = null;
if (empty($params['env']) || $params['env'] === '1') {
    echo "  \n\033[33m Which environment do you want the application to be initialized in?\033[0m \n\n";
    foreach ($envNames as $i => $name) {
        echo "  [$i] $name\n";
    }
    echo "\n  Your choice [0-" . (count($envs) - 1) . ', or "q" to quit] ';
    $answer = trim(fgets(STDIN));

    if (!ctype_digit($answer) || !in_array($answer, range(0, count($envs) - 1))) {
        echo "\n  Quit initialization.\n";
        exit(0);
    }

    if (isset($envNames[$answer])) {
        $envName = $envNames[$answer];
    }
} else {
    $envName = $params['env'];
}

if (!in_array($envName, $envNames)) {
    $envsList = implode(', ', $envNames);
    echo "\n  $envName is not a valid environment. Try one of the following: $envsList. \n";
    exit(2);
}

$env = $envs[$envName];

if (empty($params['env'])) {
    echo "\n  \033[32m Initialize the application under '{$envNames[$answer]}' environment? [yes|no] \033[0m ";
    $answer = trim(fgets(STDIN));
    if (strncasecmp($answer, 'y', 1)) {
        echo "\n  Quit initialization.\n";
        exit(0);
    }
}

ob_start();
require("$root/environments/{$env['path']}/common/config/_main-local.php");
$local_config = ob_get_clean();
ob_end_clean();

file_put_contents("$root/environments/{$env['path']}/common/config/main-local.php", $local_config);

echo "\n  \033[32m Start initialization ...\033[0m \n\n";
$files = getFileList("$root/environments/{$env['path']}");
$all = false;
foreach ($files as $file) {
    if (strpos($file, '_main-local.php') || strpos($file, '.gitignore')) {
        continue;
    }
    if (!copyFile($root, "environments/{$env['path']}/$file", $file, $all, $params)) {
        break;
    }
}

if (isset($env['writable'])) {
    foreach ($env['writable'] as $writable) {
        echo "      chmod 0777 $writable\n";
        @chmod("$root/$writable", 0777);
    }
}

if (isset($env['executable'])) {
    foreach ($env['executable'] as $executable) {
        echo "      chmod 0755 $executable\n";
        @chmod("$root/$executable", 0755);
    }
}

echo "\n  ... initialization completed.\n\n";
echo "\n  \033[32m Start migrations ...\033[0m \n\n";
if (preg_match('/^win/i', PHP_OS)) {
    passthru("yii migrate --interactive=0");
} else {
    passthru("php yii migrate --interactive=0");
}
echo "\n  \033[32m ... migrations completed.\033[0m \n\n";

function getFileList($root, $basePath = '')
{
    $files = [];
    $handle = opendir($root);
    while (($path = readdir($handle)) !== false) {
        if ($path === '.svn' || $path === '.' || $path === '..') {
            continue;
        }
        $fullPath = "$root/$path";
        $relativePath = $basePath === '' ? $path : "$basePath/$path";
        if (is_dir($fullPath)) {
            $files = array_merge($files, getFileList($fullPath, $relativePath));
        } else {
            $files[] = $relativePath;
        }
    }
    closedir($handle);
    return $files;
}

function copyFile($root, $source, $target, &$all, $params)
{
    if (!is_file($root . '/' . $source)) {
        echo "       skip $target ($source not exist)\n";
        return true;
    }
    if (is_file($root . '/' . $target)) {
        if (file_get_contents($root . '/' . $source) === file_get_contents($root . '/' . $target)) {
            echo "  unchanged $target\n";
            return true;
        }
        if ($all) {
            echo "  overwrite $target\n";
        } else {
            echo "      exist $target\n";
            echo "            ...overwrite? [Yes|No|All|Quit] ";


            $answer = !empty($params['overwrite']) ? $params['overwrite'] : trim(fgets(STDIN));
            if (!strncasecmp($answer, 'q', 1)) {
                return false;
            } else {
                if (!strncasecmp($answer, 'y', 1)) {
                    echo "  overwrite $target\n";
                } else {
                    if (!strncasecmp($answer, 'a', 1)) {
                        echo "  overwrite $target\n";
                        $all = true;
                    } else {
                        echo "       skip $target\n";
                        return true;
                    }
                }
            }
        }
        file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
        return true;
    }
    echo "   generate $target\n";
    @mkdir(dirname($root . '/' . $target), 0777, true);
    file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
    return true;
}

function getParams()
{
    $rawParams = [];
    if (isset($_SERVER['argv'])) {
        $rawParams = $_SERVER['argv'];
        array_shift($rawParams);
    }

    $params = [];
    foreach ($rawParams as $param) {
        if (preg_match('/^--(\w+)(=(.*))?$/', $param, $matches)) {
            $name = $matches[1];
            $params[$name] = isset($matches[3]) ? $matches[3] : true;
        } else {
            $params[] = $param;
        }
    }
    return $params;
}

function read_stdin()
{
    $fr = fopen("php://stdin", "r");
    $input = fgets($fr, 128);
    $input = trim($input);
    fclose($fr);
    return $input; // return the text entered
}

function prompt_silent()
{
    if (preg_match('/^win/i', PHP_OS)) {
        $pwd = exec('powershell -c "$pw = read-host \"  Enter password\" -AsSecureString; $password = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($pw)); echo \"\"; $password;"');
    } else {
        echo '  Enter password: ';
        $pwd = exec('
            #!/bin/bash
            stty -echo
            printf "Enter password: "
            read PASSWORD
            stty echo
            printf "\n"
            echo $PASSWORD
        ');
        echo "\n";
    }
    return $pwd;
}

function dbConfiguration()
{
    $dbList = array(
        'mysql', 'sqlite', 'pgsql', 'cubrid', 'sqlsrv', 'dblib', 'mssql', 'oci'
    );
    $choose = array("y" => true, "n" => false);
    echo "  \033[33m Select the name of the driver to connect to the database:\033[0m \n\n";
    foreach ($dbList as $i => $db) {
        echo "  [$i] $db\n";
    }
    echo "\n  Your choice [0-" . (count($dbList) - 1) . ', "q" to quit, or any other to skip configuration] ';
    $driver = trim(fgets(STDIN));
    if (!ctype_digit($driver) && $driver == "q") {
        echo "\n  Quit initialization.\n";
        exit(0);
    } else if (!ctype_digit($driver) || !in_array($driver, array_keys($dbList))) {
        echo "\n  Skip configuration database.\n\n";
        return true;
    } else {
        $driverName = $dbList[$driver];
        echo "\n  Enter the server address: ";
        while (($server = read_stdin()) == false) {
            echo '  incorrect answer, server name can not be empty. Try again ';
        }
        echo "  Enter the database name: ";
        while (($dbName = read_stdin()) == false) {
            echo '  incorrect answer, database name can not be empty. Try again ';
        }
        echo "  Enter port: ";
        $port = read_stdin();
        echo "  Create a new database? (\"y\" - yes, \"n\" - no) ";
        while (!in_array($dbCreate = read_stdin(), array_keys($choose))) {
            echo '  incorrect answer, try again ';
        }
        $dbCreate = $choose[$dbCreate];
        echo "  Enter username: ";
        while (($username = read_stdin()) == false) {
            echo '  incorrect answer, username can not be empty. Try again ';
        }
        $password = prompt_silent();
        switch ((int)$driver) {
            case 0:
            case 5:
            case 6:
                $dsnNew = "{$driverName}:host={$server};";
                $dsnCheck = "{$driverName}:host={$server};dbname={$dbName}";
                break;
            case 1:
                //
                break;
            case 2:
                $dsnNew = "{$driverName}:host={$server};port={$port};dbname=postgres";
                $dsnCheck = "{$driverName}:host={$server};port={$port};dbname={$dbName}";
                break;
            case 3:
                $dsnNew = "{$driverName}:host={$server};port={$port};";
                $dsnCheck = "{$driverName}:dbname={$dbName};host={$server};port={$port};";
                break;
            case 4:
                $dsnNew = "{$driverName}:Server={$server};MultipleActiveResultSets=false;";
                $dsnCheck = "{$driverName}:Server={$server};Database={$dbName};MultipleActiveResultSets=false;";
                break;
            case 7:
                $dsnNew = "{$driverName}:dbname={$server}:{$port};";
                $dsnCheck = "{$driverName}:dbname={$server}:{$port}/{$dbName};";
                break;
        }
    }
    if ($dbCreate) {
        try {
            $pdo = new PDO($dsnNew, $username, $password);
            $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            try {
                $pdo->query("CREATE DATABASE $dbName");
                echo "  Database $dbName was created successfully.\n";
            } catch (PDOException $e) {
                echo "  Database $dbName was already exist\n";
                echo "  Use this base? WARNING: All tables in database $dbName will be removed : (\"y\" - yes, \"n\" - no) ";
                while (!in_array($overwrite = read_stdin(), array_keys($choose))) {
                    echo '  incorrect answer, try again ';
                }
                $overwrite = $choose[$overwrite];
                if (!$overwrite) {
                    clearScreen();
                    echo "\tYii Application Initialization Tool v1.0\n\n";
                    return false;
                }
                try {
                    $pdo->query("DROP DATABASE $dbName;");
                } catch (PDOException $e) {
                    clearScreen();
                    print "  Error!: " . $e->getMessage() . " Try Again.\n\n";
                    echo "\tYii Application Initialization Tool v1.0\n\n";
                    return false;
                }
                try {
                    $pdo->query("CREATE DATABASE $dbName");
                } catch (PDOException $e) {
                    clearScreen();
                    print "  Error!: " . $e->getMessage() . " Try Again.\n\n";
                    echo "\tYii Application Initialization Tool v1.0\n\n";
                    return false;
                }
                echo "  Database $dbName successfully cleared.\n";
            }
            echo "\n";
        } catch (PDOException $e) {
            clearScreen();
            print "  Error!: " . $e->getMessage() . " Try Again.\n\n";
            echo "\tYii Application Initialization Tool v1.0\n\n";
            return false;
        }
    } else {
        try {
            $pdo = new PDO($dsnCheck, $username, $password);
            echo "  connection to the server $server established\n";
            echo "\n";
        } catch (PDOException $e) {
            clearScreen();
            print "  Error!: " . $e->getMessage() . " Try Again.\n\n";
            echo "\tYii Application Initialization Tool v1.0\n\n";
            return false;
        }
    }
    $db = array(
        'dsn' => $dsnCheck,
        'username' => $username,
        'password' => $password
    );
    return $db;
}

function mailConfiguration()
{
    echo "  \033[33m Configuring the mail module:\033[0m \n\n";
    echo "  Enter host: ";
    while (($host = read_stdin()) == false) {
        echo '  incorrect answer, username can not be empty. Try again ';
    }
    echo "  Enter username: ";
    while (($username = read_stdin()) == false) {
        echo '  incorrect answer, username can not be empty. Try again ';
    }
    $password = prompt_silent();
    echo "  Enter port: ";
    while (($port = read_stdin()) == false) {
        echo '  incorrect answer, username can not be empty. Try again ';
    }
    $mail = [
        'host' => "{$host}",
        'username' => "{$username}",
        'password' => "{$password}",
        'port' => $port,
    ];
    return $mail;
}

function clearScreen()
{
    if (preg_match('/^win/i', PHP_OS)) {
        popen('cls', 'w');
    } else {
        exec('clear');
    }
}